version: '3'

x-loki-logging: &lokilogging
  driver: json-file
  options:
    tag: "{{.Name}}"

services:

  # The API

  app:
    build: ./app
    container_name: api
    expose: 
      - "8000"
    ports:
     - 7890:8000
    networks:
      - web
      - default
    volumes:
      - ${VOLUMES}/recordings:/data/recordings
    # - './app:/app'
    environment:
      REDIS_URL: redis://redis:6379
      # HLS_URL: hls:1935
      MONGO_URL: mongodb://mongo:27017
    depends_on:
      - redis
      - mongo
    restart: unless-stopped
    logging: *lokilogging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=le"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # recorder:
  #   build: ./recorder
  #   container_name: recorder
  #   volumes:
  #    - ${VOLUMES}/recordings:/src/app/data
  #   environment:
  #     REDIS_URL: redis://redis:6379
  #   depends_on:
  #     - redis
  #   restart: unless-stopped
  #   logging: *lokilogging

  # Machine Learning for Streams

  # yolo:
  #   build: ./yolo
  #   container_name: yolo
  #   depends_on:
  #     - app
  #   restart: unless-stopped
  #   logging: *lokilogging

  # basic-clip:
  #   build: ./basic-clip
  #   container_name: basic_clip
  #   environment:
  #     REDIS_URL: redis://redis:6379
  #   depends_on:
  #     - redis
  #     - app
  #   restart: unless-stopped
  #   logging: *lokilogging


  # Data Storage

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - ${VOLUMES}/redis-data:/data
    #  - ./redis/redis_6789.conf:/usr/local/etc/redis/redis.conf
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    logging: *lokilogging

  # a dashboard to view redis
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    depends_on:
      - redis
    ports:
      - '8035:8001'
    # volumes:
    #   - ./redisinsight:/db 

  # redisinsight_init:
  #   image: curlimages/curl
  #   restart: on-failure
  #   depends_on:
  #     - redis
  #     - redisinsight
  #   command: >
  
  # hls:
  #   build: ./hls
  #   container_name: hls
  #   restart: unless-stopped
  #   networks:
  #     - web
  #     - default
  #   ports:
  #    - 1935:1935
  #    - 8089:80
  #   expose:
  #     - "80"
  #     - "1935"
  #   volumes:
  #     - ./app_data/hls:/tmp/hls
  #   logging: *lokilogging
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.hls.rule=Host(`hls.${DOMAIN}`)"
  #     - "traefik.http.routers.hls.entrypoints=websecure"
  #     - "traefik.http.routers.hls.tls.certresolver=le"
  #     - "traefik.http.routers.hls.tls=true"
  #     - "traefik.http.services.hls.loadbalancer.server.port=80"

  # background task management

  # # celery broker
  # celery_rabbitmq:
  #   image: rabbitmq:3.6.6
  #   ports:
  #     - "5672:5672"
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=admin
  #     - RABBITMQ_DEFAULT_PASS=mypass

  # # celery result backend
  # celery_redis:
  #   image: redis
  #   ports:
  #    - "6381:6379"

  # # celery worker - duplicate for multiple processes? use replicas=x?
  # celery_worker:
  #   build:
  #     context: ./app
  #     dockerfile: Dockerfile
  #   image: madefire/chordtest
  #   command: ['celery', '-A', 'app.workers.app', 'worker', '-l', 'info']
  #   environment:
  #     - BROKER_URL=amqp://admin:mypass@celery_rabbitmq:5672//
  #     - RESULT_BACKEND=redis://celery_redis:6381/0
  #     - C_FORCE_ROOT=true
  #   volumes:
  #     - ./:/app/
  #   depends_on:
  #     - celery_rabbitmq
  #     - celery_redis


  # storing recipes

  mongo:
    build: ./mongo
    container_name: mongo
    # image: mongo
    restart: unless-stopped
    volumes:
      - ${VOLUMES}/mongo:/data/db
    # environment:
    #   MONGO_INITDB_DATABASE: app
    logging: *lokilogging
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: unless-stopped
    ports:
      - 8081:8081
    networks:
      - web
      - default
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${GRAFANA_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${GRAFANA_PASS}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo.rule=Host(`mongoex.${DOMAIN}`)"
      - "traefik.http.routers.mongo.entrypoints=websecure"
      - "traefik.http.routers.mongo.tls.certresolver=le"
      - "traefik.http.routers.mongo.tls=true"
      - "traefik.http.services.mongo.loadbalancer.server.port=8081"



  # Error tracking 
  # https://dev.to/ruanbekker/setup-glitchtip-error-monitoring-on-docker-358

  
  # loki:
  #   image: grafana/loki:master
  #   container_name: loki
  #   volumes:
  #     - /data/volumes/loki:/data/loki
  #     #- ${VOLUMES}:/loki
  #   #   - ./grafana-stack/loki/config.yaml:/etc/loki/config.yaml
  #   command: -config.file=/etc/loki/local-config.yaml

  # promtail:
  #   image: grafana/promtail:master
  #   container_name: promtail
  #   depends_on:
  #       - loki
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers
  #     - /var/log:/var/log
  #     - ./grafana-stack/promtail/config.yaml:/etc/promtail/config.yaml
  #   command: -config.file=/etc/promtail/config.yaml

  # prometheus:
  #   image: prom/prometheus:v2.7.1
  #   container_name: prometheus
  #   ports:
  #       - "9090:9090"
  #   volumes:
  #     - ${VOLUMES}/prometheus:/prometheus/data
  #     - ./grafana-stack/prometheus/config.yaml:/etc/prometheus/config.yaml
  #   command: >-
  #       --config.file=/etc/prometheus/config.yaml
  #       --storage.tsdb.path=/prometheus
  #       --web.console.libraries=/usr/share/prometheus/console_libraries
  #       --web.console.templates=/usr/share/prometheus/consoles

  # grafana:
  #   build: ./grafana-stack/grafana
  #   container_name: grafana
  #   depends_on:
  #       - loki
  #   volumes:
  #     - ./grafana-stack/grafana/dashboards:/var/lib/grafana/dashboards
  #   networks:
  #     - web
  #     - default
  #   ports:
  #     - "3000:3000"
  #   expose:
  #     - "3000"
  #   environment:
  #       GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
  #       GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
  #       #GF_SERVER_ROOT_URL: http://grafana:3000
  #       GF_SERVER_ROOT_URL: https://grafana.${DOMAIN}
  #       GF_FORCE_MIGRATION: 'true'
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
  #     - "traefik.http.routers.grafana.entrypoints=websecure"
  #     - "traefik.http.routers.grafana.tls.certresolver=le"
  #     - "traefik.http.routers.grafana.tls=true"
  #     - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # cadvisor:
  #   #image: google/cadvisor:v0.33.0
  #   image: gcr.io/cadvisor/cadvisor
  #   container_name: prom_cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #       #- /dev/disk/:/dev/disk:ro


  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: prom_node_exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # redis-exporter:
  #   image: bitnami/redis-exporter:latest
  #   container_name: prom_redis_exporter
  #   restart: unless-stopped
  #   depends_on:
  #       - redis
  #   environment:
  #     REDIS_ADDR: redis://redis:6379

  # # mongo-exporter:
  # #   image: bitnami/mongodb-exporter:latest
  # #   command: --mongodb.uri=mongodb://mongo:27017
  # #   restart: unless-stopped
  # #   depends_on:
  # #       - mongo
  # #   environment:
  # #     MONGODB_URL: mongodb://mongo:27017

  # # nginx-exporter:
  # #   image: nginx/nginx-prometheus-exporter
  # #   restart: unless-stopped
  # #   command: -nginx.scrape-uri=http://hls:8080/stub_status
  # #   depends_on:
  # #       - hls

  # nginx-rtmp-exporter:
  #   image: vtimofei/nginx_rtmp_prometheus:v0.2.1
  #   container_name: prom_hls_exporter
  #   restart: unless-stopped
  #   command: --nginxrtmp.scrape-uri="http://hls/stat"
  #   depends_on:
  #       - hls


networks:
  #default:
  #  name: ptg
  web:
    external: true
    name: web
